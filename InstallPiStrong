#!/bin/bash
#
# Installation script for piStrongVPN
# Performs the following tasks
#   Ensures required packages are installed
#       On Raspbian these are: Apt-get install libgmp10 libgmp-dev libsystemd-dev libssl-dev
#   Creates a work directory (~/piStrong)
#   Downloads and bunzip2 the current released strongswan bits 
#   Builds strongswan
#   Installs into the system
#   Creates /etc/swanctl/conf.d/pistrong-ServerConnection.conf
#   Creates root CA and VPN cert
# Use pistrong to manage users and certificates
# Start and stop the VPN via: 'sudo pistrong service start' and 'sudo pistrong service stop' ...
#   ...or 'sudo systemctl start strongswan' and 'sudo systemctl stop strongswan'
#

function getssver() {
    vs1=$(curl -s -L https://www.strongswan.org/download.html | grep 'Current Release' | head -1)
    s1=${vs1##<h4>Current Release*normal\">}
    ssver=${s1%%<*}
    return 1
}

function getosdistro() {
    [ "$osdistro" != "" ] && return
    if [ -f "/etc/os-release" ]
    then
        osdistro=$(grep ^ID= /etc/os-release | (IFS='='; read a b ; echo $b))
    else
        osdistro="unknown"
    fi
    osdistro=${osdistro%\"}
    osdistro=${osdistro#\"}
}

function askyn() {
    local ans
    echo -n "$1" '[y/n]? ' ; read $2 ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

function askin() {
    local ans
    echo -n "$1 "; read -n 1 ans
}

function askinall() {
    if [ "$cmd" == "all" ]
    then
	# Flush input in case of typeahead
	while read -e -t 0.1 ; do : ; done
	askin "$1"
    fi
}

function gotoBuildDir() {
    cd ~/piStrong
    for i in strongswan-*; do [ -d "$i" ] && cd $i ; done
}

function emitSwanctl() {

    cd /etc/swanctl
    [ ! -d pistrong ] && mkdir pistrong && mkdir pistrong/{client-assets,server-assets,VPNClients,backup}
    chmod 700 pistrong/client-assets pistrong/server-assets
    [ ! -d "p12" ] && mkdir p12 && chmod 750 p12
    myipaddr=$(hostname --ip-address)
    mysub1=$(ip -o -f inet addr show | awk '/scope global/{print $6}' | head -n 1 | sed -e 's/255/0/')
    mysubnet="$mysub1/$(ip -o -f inet addr show | awk '/scope global/{print $4}' | head -n 1 | (IFS='/'; read a b; echo $b))"
    if [ -f conf.d/pistrong-ServerConnection.conf ]
    then
        echo "% Saving original conf.d/pistrong-ServerConnection.conf"
        mv conf.d/pistrong-ServerConnection.conf /etc/swanctl/pistrong/backup/connections-pistrong.$(date +"%m%d%H%M%S")
    fi
    echo ">> Creating /etc/swanctl/conf.d/pistrong-ServerConnection.conf for IP address $myipaddr and subnet $mysubnet"
    cat > /etc/swanctl/conf.d/pistrong-ServerConnection.conf <<EOF
connections {
    linux-pubkey-ikev2 {
        version = 2
        proposals = aes192gcm16-aes128gcm16-prfsha256-ecp256-ecp521,aes192-sha256-modp3072,default
        rekey_time = 0s
        pools = primary-pool-ipv4
        fragmentation = yes
	local_addrs = $myipaddr
        local-1 {
             auth = pubkey
             cacerts = strongSwanCACert.pem
             certs = linux-strongSwanVPNCert.pem
             id = linux.mycomputer.net
        }
        remote-1 {
             auth = pubkey
        }
        children {
            net-linux {
                remote_ts = $vpnsubnet
                local_ts = $mysubnet
                updown = /libexec/ipsec/_updown iptables
		esp_proposals = aes128gcm128-x25519
            }
        }
    }
    ios-pubkey-ikev2 {
        version = 2
        proposals = aes256-sha1-modp1024,aes192-sha256-modp3072,aes128-sha1-modp1536,aes128-sha256-modp1536,aes128-sha256-modp2048,default
        rekey_time = 0s
        pools = primary-pool-ipv4
        fragmentation = no
        dpd_delay = 30s
        send_cert = always

        local-1 {
             auth = pubkey
             cacerts = strongSwanCACert.pem
             certs = ios-strongSwanVPNCert.pem
             id = ios.mycomputer.net
        }

        remote-1 {
             auth = eap-tls
             id = %any
        }

        children {
             net-ios {
                 local_ts = 0.0.0.0/0
                 rekey_time = 0s
                 dpd_action = clear
                 esp_proposals = aes256-sha1-modp1024,aes192-sha256-modp3072,aes128-sha1-modp1536,aes128-sha256-modp1536,aes128-sha256-modp2048,default
             }
        }
    }
    windows-pubkey-ikev2 {
        version = 2
        proposals = aes256-sha1-modp1024,aes192-sha256-modp3072,default
        rekey_time = 0s
        pools = primary-pool-ipv4
        fragmentation = yes
        dpd_delay = 30s

        local-1 {
             auth = pubkey
             cacerts = strongSwanCACert.pem
             certs = windows-strongSwanVPNCert.pem
             id = windows.mycomputer.net           # Not used for Windows authentication
        }

        remote-1 {
             id = %any
        }

        children {
             net-windows {
                 local_ts = 0.0.0.0/0
                 rekey_time = 0s
                 dpd_action = clear
                 esp_proposals = aes256-sha1-modp1024,aes192-sha256-modp3072,default
             }
        }
    }
}
    pools {
    primary-pool-ipv4 {
        addrs = $vpnsubnet
        dns = $vpndns
    }
}
EOF

    cp /etc/swanctl/conf.d/pistrong-ServerConnection.conf /etc/swanctl/pistrong/backup/ServerConnection-pistrong.piStrongInstall
}

function emitFirewall() {

    getosdistro
    case "$osdistro" in
	debian|raspbian)
	    [ -f /etc/swanctl/pistrong/iptables ] && return
	    echo "Creating iptables POSTROUTING for strongSwan"
	    echo "  See /etc/swanctl/pistrong/iptables"
	    cat > /etc/swanctl/pistrong/iptables <<EOF
#  Add the necessary iptables routes to enable VPN routing to the internet

*nat
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s $vpnsubnet -o eth0 -m policy --dir out --pol ipsec -j ACCEPT
-A POSTROUTING -s $vpnsubnet -o eth0 -j MASQUERADE
COMMIT
EOF
	    [ -f /etc/systemd/system/pistrong-iptables-load.service ] && return
	    cat > /etc/systemd/system/pistrong-iptables-load.service <<EOF
[Unit]
Description=Load iptables for strongSwan
Requires=network-online.target

[Service]
ExecStart=/sbin/iptables-restore /etc/swanctl/pistrong/iptables
User=root
StandardInput=null
StandardOutput=null
StandardError=null
Restart=on-failure

[Install]
WantedBy=multi-user.target

EOF
	    chmod 644 /etc/systemd/system/pistrong-iptables-load.service
	    echo "** I have created the service pistrong-iptables-load, but it is not enabled"
	    echo "** If you have another way to load iptables, you must add the code from /etc/swanctl/pistrong/iptables to it"
	    echo "** Otherwise you must sudo systemctl enable pistrong-iptables-load"
	    ;;
	*)
	    echo "% You must manually add iptables POSTROUTING entries for strongSwan"
	    echo "  and in such a way that they will be instantiated when the system restarts."
	    echo "  These entries enable VPN routing to the internet."
	    echo ""
	    echo "Your iptables *nat POSTROUTING chain must contain:"
	    echo "*nat"
	    echo ":POSTROUTING ACCEPT [0:0]"
	    echo "-A POSTROUTING -s $vpnsubnet -o eth0 -m policy --dir out --pol ipsec -j ACCEPT"
	    echo "-A POSTROUTING -s $vpnsubnet -o eth0 -j MASQUERADE"
	    echo "COMMIT"
	    ;;
    esac
}

function DoPreReqs() {
    getosdistro
    case "$osdistro" in
        ubuntu)
            echo "I'll try to install the required packages"
            apt-get install make gcc pkg-config libgmp10 libgmp-dev libsystemd-dev libssl-dev python3-pexpect
            echo "Check above to ensure everything got installed"
            ;;
        opensuse*)
            echo "I'll try to install the required packages"
            zypper in make gcc gmp-devel systemd-devel libopenssl-1_1-devel python3-pexpect
            echo "Check above to ensure everything got installed"
            ;;
        centos|rhel|fedora)
            echo "I'll try to install the required packages, but this is incomplete"
            yum install gcc gmp-devel.x86_64 systemd-devel.x86_x64 openssl-devel.x86_64
            echo "Check above to ensure everything got installed"
            echo ">> You'll need to install python3 and pexpect if they are not already installed"
            ;;
        debian|raspbian)
            echo ">> Ensure your Pi is up to date"
            echo " Your Pi must be up to date with the Raspbian repositories by using these commands"
	    echo ""
            echo "    sudo apt-get update"
            echo "    sudo apt-get upgrade"
            echo ""
            echo "  If you have not done this yet, respond n to exit and update your Pi"
            echo "  Then reboot your Pi and restart this procedure"
            echo ""
            if askyn "Press y to Continue, n to exit and update your Pi" "-n 1"
            then
                echo ""
                for p in libgmp10 libgmp-dev libsystemd-dev libssl-dev python3-pexpect zip ; do
                    if ! dpkg-query -s $p > /dev/null 2>&1
                    then
                        echo ">> Installing package $p"
                        apt-get install $p
                    else
                        echo ">> Package $p already installed"
                    fi
                done
            else
                echo ""
                exit 1
            fi
            if [ "$(hostname)" == "raspberrypi" ]
            then
                echo ""
                echo "% Your hostname is still 'raspberrypi'"
                echo "  We strongly suggest you change it via raspi-config Network Options before continuing"
                if askyn "Press y to exit and correct hostname, n to continue"
                then
                    exit 1
                fi
            fi
    ;;
        *) echo "% Pre-reqs unknown for distro $osdistro"
    esac
}

function DoDownload() {
    cd ~/
    getssver
#    ssver="5.6.3"  # If you want a specific version (and it's still available, of course)
    echo "% Using Strongswan version $ssver"
    if askinall "Press any key to start Strongswan download:" ; then echo ""; fi
    [ ! -d piStrong ] && mkdir piStrong
    cd piStrong
    [ -d strongswan-$ssver ] && rm -rf strongswan-$ssver
    if [ ! -f strongswan-$ssver.tar.bz2 ]
    then
	curl -L https://download.strongswan.org/strongswan-$ssver.tar.bz2 -o strongswan-$ssver.tar.bz2
    else
	echo "% strongSwan $ssver .tar.bz2 file already exists here; using it"
    fi
    if askin "Press any key to continue:" ; then echo ""; fi
    tar -xjvf strongswan-$ssver.tar.bz2
#    curl -L https://download.strongswan.org/strongswan-$ssver.tar.bz2 | tar -xjvf -
}

function DoPreConf() {
    gotoBuildDir
    if askinall "Press any key to start pre-make configuration:" ; then echo ""; fi
    echo ""
    echo ">> Performing pre-make configuration <<"
    ./configure --prefix= --enable-eap-mschapv2 --enable-eap-identity --enable-openssl --enable-eap-md5 --enable-eap-tls --enable-eap-dynamic --enable-systemd --enable-swanctl --disable-charon --disable-stroke --disable-scepclient --enable-counters
}

function DoMake() {
    gotoBuildDir
    if askinall "Press any key to start make:" ; then echo "" ; fi
    echo ">> Performing make <<"
    make
}

function DoInstall() {
    gotoBuildDir
    if askinall "Press any key to start install:" ; then  make install ; fi
}

function DoPostConf() {
    [ "$cmd" == "allx" ] && echo "" && echo "Reached postconf at $(date)"
    askinall "Press any key to start postconf:"
    echo ""
    [ ! -d "/etc/swanctl/conf.d" ] && mkdir -p /etc/swanctl/conf.d
    echo ""
    echo "If you are only going to use the VPN Client on this system, answer N to the next question"
    echo "Note, however, 2 Server configuration questions will still be asked"
    echo "For Client use only, Press Enter to take the defaults"
    echo "The Server connections configuration file will be created, but disabled"
    echo ""
    fserver=1
    if askyn "Do you want the VPN Server configuration enabled on this system"
    then
	fserver=0
    fi
    echo ""
    echo "The VPN Subnet is used by the VPN server for hosting clients"
    echo "Suggest using a 10.*.*.* subnet although this is not mandatory"
    echo "It must not conflict with any other local subnets"
    echo ""
    vpnsubnet="10.1.10.0/24"
    echo -n "Subnet for VPN clients [$vpnsubnet]: " ; read ans
    [ "$ans" != "" ] && vpnsubnet=$ans
    myipaddr=$(hostname --ip-address)
    mysubnet=$(ip -o -f inet addr show | awk '/scope global/{print $6}' | head -n 1 | sed -e 's/.255//')
    dfdns="${mysubnet}.1"
    vpndns="$dfdns, 1.1.1.1"
    echo ""
    echo "A local DNS server provides local name service resoluton for remote VPN clients"
    echo "A remote DNS server is needed for internet name resolution"
    echo "You must provide at least one DNS server"
    echo ""
    echo -n "Comma-separated list of DNS servers for VPN clients (local,internet) [$vpndns]: " ; read ans
    [ "$ans" != "" ] && vpndns=$ans
    echo ""
    emitSwanctl

    if [ ! -f "/etc/sysctl.d/92-pistrong.conf" ]
    then
	[ $fserver -eq 0 ] && s="" || s="."
	[ $fserver -eq 0 ] && echo ">> Creating /etc/sysctl.d/${s}92-pistrong.conf to set net.ipv4.ip_forward=1"
	# Write it on client as well, just in case. But hidden.
	echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/${s}92-pistrong.conf
	[ $fserver -eq 0 ] && sysctl -p /etc/sysctl.d/92-pistrong.conf > /dev/null
    fi
    if [ $fserver -eq 0 ]
    then
	emitFirewall
    else
	echo ">> Moving conf.d/pistrong-ServerConnection.conf to pistrong/backup since it will not be used"
	mv /etc/swanctl/conf.d/pistrong-ServerConnection.conf /etc/swanctl/pistrong/backup/.pistrong-ServerConnection.conf.$(date +"%m%d%H%M%S")
    fi
    # Tell systemd to reload the config files in case we wrote pistrong-iptables-load
    systemctl daemon-reload
}

function DoAll() {
    DoPreReqs
    DoDownload
    DoPreConf
    DoMake
    DoInstall
    fServer=0
    DoPostConf

    echo ">> pistrong/strongSwan Installation complete <<"
    echo ">> "
    echo ">> There are a few Post-installation steps:"
    if [ $fServer -eq 0 ]
    then
	echo ">>   See http://github/gitbls/pistrong/blob/master/makeMyCA for a usable, customizable CA configuration script"
	echo ""
	echo ">>   Set up iptables (see http://github/gitbls/pistrong/blob/master/README.md)"
	echo ""
	echo ">>   See pistrong help and pistrong --help for pistrong command details"
    else
	echo ">>   Once you have received the VPN Client assets from the VPN Server manager"
	echo ">>    install them into strongSwan using the 'sudo pistrong client install' command"
	echo ">>   Then..."
    fi
    echo ""
    echo ">>      'sudo pistrong service start' or 'sudo systemctl start strongswan' to start the strongSwan VPN"
    echo ">>      'sudo pistrong service enable' or 'sudo systemctl enable strongswan' to enable strongSwan to restart after reboot"
    echo ""
    echo ">> Reboot and make sure everything works"
    echo ""
}
#
# Main
#

if [[ ! $EUID -eq 0 ]];then
    echo "? Please run as root: sudo $0 $1 $2"
    exit 1
fi

cmd="$1"
[ "$cmd" == "" ] && cmd="all"
case "$cmd" in
    "prereq")   DoPreReqs ;;
    "download") DoDownload ;;
    "preconf") DoPreConf ;;
    "make") DoMake ;;
    "install") DoInstall ;;
    "postconf"|"post-configure") DoPostConf ;;
    "all"|"allx") DoAll ;;
    *) echo "? Invalid command" ;
       echo "? Commands: prereq|download|preconf|make|install|postconf|all" ;
       exit 1
       ;;
esac
